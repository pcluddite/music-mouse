// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Musical_Mouse_Customizer
{
    using System.IO;
    using System;
    
    
    #line 1 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ScriptTemplate : ScriptTemplateBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write("#NoTrayIcon\r\n#include <audio.au3>\r\nOnAutoItExitRegister(\"_Exit\")\r\nHotKeySet(\"^+l\"" +
                    ", \"_Input\")\r\nFileInstall(\"");
            
            #line 14 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(musicPath));
            
            #line default
            #line hidden
            this.Write("\", @TempDir & \"\\\" & \"");
            
            #line 14 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(musicPath)));
            
            #line default
            #line hidden
            this.Write("\")\r\nFileInstall(\"");
            
            #line 15 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vistaVolPath));
            
            #line default
            #line hidden
            this.Write("\", @TempDir & \"\\\" & \"");
            
            #line 15 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(vistaVolPath)));
            
            #line default
            #line hidden
            this.Write("\")\r\n$sound = _SoundOpen(@TempDir & \"\\\" & \"");
            
            #line 16 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(musicPath)));
            
            #line default
            #line hidden
            this.Write("\")\r\nif @error then exit\r\n\r\n$XpOr2000 = StringInStr(@OSVersion, \"XP\") OR StringInS" +
                    "tr(@OSVersion, \"2000\")\r\nif Not $XpOr2000 Then\r\n\tPluginOpen(@TempDir & \"\\\" & \"");
            
            #line 21 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(vistaVolPath)));
            
            #line default
            #line hidden
            this.Write("\")\r\n\tif @error then exit\r\nEndIf\r\nWhile True\r\n\t$pos = MouseGetPos()\r\n\tSleep(10)\r\n\t" +
                    "$pos2 = MouseGetPos()\r\n\tif $pos[0] & $pos[1] <> $pos2[0] & $pos2[1] then\r\n");
            
            #line 29 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

if (presetVolume != null) {

            
            #line default
            #line hidden
            this.Write("\t\tif Not $XpOr2000 Then\r\n\t\t\tif _IsMute_Vista() Then _SetMute_Vista(False)\r\n\t\t\tif " +
                    "_GetMasterVolumeScalar_Vista() < ");
            
            #line 34 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(presetVolume));
            
            #line default
            #line hidden
            this.Write(" Then _SetMasterVolumeScalar_Vista(");
            
            #line 34 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(presetVolume));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\tEndIf\r\n\t\t\r\n");
            
            #line 37 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t_SoundPlay($sound)\r\n\t\t\r\n\t\tDo\r\n\t\t\t$pos = MouseGetPos()\r\n\t\t\tSleep(100)\r\n\t\t\t$pos2 " +
                    "= MouseGetPos()\r\n\t\tUntil $pos[0] = $pos2[0] And $pos2[1] = $pos[1]\r\n");
            
            #line 47 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
 
if (resumePlay) { 

            
            #line default
            #line hidden
            this.Write("\t\t_SoundPause($sound)\r\n");
            
            #line 51 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

}
else {

            
            #line default
            #line hidden
            this.Write("\t\t_SoundStop($sound)\r\n");
            
            #line 56 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\tEndIf\r\nWEnd\r\n\r\nFunc _Input()\r\n");
            
            #line 63 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

if (!string.IsNullOrEmpty(stopPassword)) { 

            
            #line default
            #line hidden
            this.Write("\t$text = InputBox(\"SecurityCheck\", \"Password\", \"\", \"\", -1, -1, 0, 0, ");
            
            #line 66 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(promptTimeout));
            
            #line default
            #line hidden
            this.Write(")\r\n\tif @error Then Return 0\r\n\tif StringCompare($text, ");
            
            #line 68 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stopPassword));
            
            #line default
            #line hidden
            this.Write(", 1) == 0 Then Exit\r\n");
            
            #line 69 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

}
else {

            
            #line default
            #line hidden
            this.Write("\tExit\r\n");
            
            #line 74 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("EndFunc\r\n\r\nFunc _Exit()\r\n\tFileDelete(@TempDir & \"\\\" & \"");
            
            #line 80 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(musicPath)));
            
            #line default
            #line hidden
            this.Write("\")\r\n\tFileDelete(@TempDir & \"\\\" & \"");
            
            #line 81 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(vistaVolPath)));
            
            #line default
            #line hidden
            this.Write("\")\r\nEndFunc");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\work\Musical Mouse Customizer\ScriptTemplate.tt"

private string _musicPathField;

/// <summary>
/// Access the musicPath parameter of the template.
/// </summary>
private string musicPath
{
    get
    {
        return this._musicPathField;
    }
}

private string _vistaVolPathField;

/// <summary>
/// Access the vistaVolPath parameter of the template.
/// </summary>
private string vistaVolPath
{
    get
    {
        return this._vistaVolPathField;
    }
}

private global::System.Nullable<int> _presetVolumeField;

/// <summary>
/// Access the presetVolume parameter of the template.
/// </summary>
private global::System.Nullable<int> presetVolume
{
    get
    {
        return this._presetVolumeField;
    }
}

private string _stopPasswordField;

/// <summary>
/// Access the stopPassword parameter of the template.
/// </summary>
private string stopPassword
{
    get
    {
        return this._stopPasswordField;
    }
}

private int _promptTimeoutField;

/// <summary>
/// Access the promptTimeout parameter of the template.
/// </summary>
private int promptTimeout
{
    get
    {
        return this._promptTimeoutField;
    }
}

private bool _resumePlayField;

/// <summary>
/// Access the resumePlay parameter of the template.
/// </summary>
private bool resumePlay
{
    get
    {
        return this._resumePlayField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool musicPathValueAcquired = false;
if (this.Session.ContainsKey("musicPath"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["musicPath"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'musicPath\' did not match the type of t" +
                "he data passed to the template.");
    }
    else
    {
        this._musicPathField = ((string)(this.Session["musicPath"]));
        musicPathValueAcquired = true;
    }
}
if ((musicPathValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("musicPath");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'musicPath\' did not match the type of t" +
                    "he data passed to the template.");
        }
        else
        {
            this._musicPathField = ((string)(data));
        }
    }
}
bool vistaVolPathValueAcquired = false;
if (this.Session.ContainsKey("vistaVolPath"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["vistaVolPath"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'vistaVolPath\' did not match the type o" +
                "f the data passed to the template.");
    }
    else
    {
        this._vistaVolPathField = ((string)(this.Session["vistaVolPath"]));
        vistaVolPathValueAcquired = true;
    }
}
if ((vistaVolPathValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("vistaVolPath");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'vistaVolPath\' did not match the type o" +
                    "f the data passed to the template.");
        }
        else
        {
            this._vistaVolPathField = ((string)(data));
        }
    }
}
bool presetVolumeValueAcquired = false;
if (this.Session.ContainsKey("presetVolume"))
{
    if ((typeof(global::System.Nullable<int>).IsAssignableFrom(this.Session["presetVolume"].GetType()) == false))
    {
        this.Error("The type \'System.Nullable<int>\' of the parameter \'presetVolume\' did not match the" +
                " type of the data passed to the template.");
    }
    else
    {
        this._presetVolumeField = ((global::System.Nullable<int>)(this.Session["presetVolume"]));
        presetVolumeValueAcquired = true;
    }
}
if ((presetVolumeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("presetVolume");
    if ((data != null))
    {
        if ((typeof(global::System.Nullable<int>).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Nullable<int>\' of the parameter \'presetVolume\' did not match the" +
                    " type of the data passed to the template.");
        }
        else
        {
            this._presetVolumeField = ((global::System.Nullable<int>)(data));
        }
    }
}
bool stopPasswordValueAcquired = false;
if (this.Session.ContainsKey("stopPassword"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["stopPassword"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'stopPassword\' did not match the type o" +
                "f the data passed to the template.");
    }
    else
    {
        this._stopPasswordField = ((string)(this.Session["stopPassword"]));
        stopPasswordValueAcquired = true;
    }
}
if ((stopPasswordValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("stopPassword");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'stopPassword\' did not match the type o" +
                    "f the data passed to the template.");
        }
        else
        {
            this._stopPasswordField = ((string)(data));
        }
    }
}
bool promptTimeoutValueAcquired = false;
if (this.Session.ContainsKey("promptTimeout"))
{
    if ((typeof(int).IsAssignableFrom(this.Session["promptTimeout"].GetType()) == false))
    {
        this.Error("The type \'System.Int32\' of the parameter \'promptTimeout\' did not match the type o" +
                "f the data passed to the template.");
    }
    else
    {
        this._promptTimeoutField = ((int)(this.Session["promptTimeout"]));
        promptTimeoutValueAcquired = true;
    }
}
if ((promptTimeoutValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("promptTimeout");
    if ((data != null))
    {
        if ((typeof(int).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Int32\' of the parameter \'promptTimeout\' did not match the type o" +
                    "f the data passed to the template.");
        }
        else
        {
            this._promptTimeoutField = ((int)(data));
        }
    }
}
bool resumePlayValueAcquired = false;
if (this.Session.ContainsKey("resumePlay"))
{
    if ((typeof(bool).IsAssignableFrom(this.Session["resumePlay"].GetType()) == false))
    {
        this.Error("The type \'System.Boolean\' of the parameter \'resumePlay\' did not match the type of" +
                " the data passed to the template.");
    }
    else
    {
        this._resumePlayField = ((bool)(this.Session["resumePlay"]));
        resumePlayValueAcquired = true;
    }
}
if ((resumePlayValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("resumePlay");
    if ((data != null))
    {
        if ((typeof(bool).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Boolean\' of the parameter \'resumePlay\' did not match the type of" +
                    " the data passed to the template.");
        }
        else
        {
            this._resumePlayField = ((bool)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ScriptTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
